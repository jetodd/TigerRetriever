(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/tim/projects/TigerRetriever/src/js/jsongenerator.js":[function(require,module,exports){
var JsonGenerator = function () {};
module.exports = JsonGenerator;

var mapHeight = 6;
var minLand = 4;
var maxGap = 3;
var tileWidth = 45;
var tileHeight = 45;
var mapWidth = 300;

JsonGenerator.prototype = {


    recreateInitialJson: function () {
        var layers = [];
        var tilesets = [];
        var background = new Array(mapWidth * mapHeight);
        background.fill(139);

        layers.push(this.makeLayer(background, mapHeight, "backgroundLayer", 1, "tilelayer", true, mapWidth, 0, 0));
        layers.push(this.makeLayer(this.makeMapBase(), mapHeight, "blockedLayer", 1, "tilelayer", true, mapWidth, 0, 0));

        tilesets.push(this.makeTileset(1, "..\/images\/tiles_spritesheet.png", 934, 790, 0, "tiles_spritesheet", 2,
            tileWidth, tileHeight));

        return this.generate(mapHeight, mapWidth, tileWidth, tileHeight, tilesets, layers);
    },
    makeTileset: function (firstgid, imageLocation, imageHeight, imageWidth, margin, name, spacing, tileHeight, tileWidth) {
        return {
            "firstgid": firstgid,
            "image": imageLocation,
            "imageheight": imageHeight,
            "imagewidth": imageWidth,
            "margin": margin,
            "name": name,
            "properties": {},
            "spacing": spacing,
            "tileheight": tileHeight,
            "tilewidth": tileWidth
        };
    },
    makeMapBase: function () {
        var utils = require('./utils');
        var gapCount = 0;
        var landCount = 5;
        var mapBase = new Array(mapWidth * mapHeight);
        mapBase.fill(0);

        var startIndex = (mapHeight - 1) * mapWidth;
        var maxIndex = mapWidth * mapHeight;

        mapBase.fill(1, startIndex, startIndex + 15);
        mapBase.fill(1, maxIndex - 15, maxIndex);

        // Generate array for map
        // 1 = land, 0 = gap
        for (i = startIndex + 15; i < maxIndex - 15; i++) {
            if (landCount < minLand && landCount > 0) {
                mapBase[i] = 1;
                landCount++;
                gapCount = 0;
            } else {
                if (utils.getRandomInt(0, 1) == 1) {
                    gapCount++;
                    mapBase[i] = 0;
                    landCount = 0;
                } else {
                    mapBase[i] = 1;
                    landCount++;
                    gapCount = 0;
                }
            }
        }
        return mapBase;
    },
    makeLayer: function (data, height, name, opacity, type, visible, width, x, y, objects) {
        layer = {
            "height": height,
            "name": name,
            "opacity": opacity,
            "type": type,
            "visible": visible,
            "width": width,
            "x": x,
            "y": y
        };

        if (data) {
            layer.data = data;
        }

        if (objects) {
            layer.objects = (objects);
        }

        return layer;

    },
    generate: function (height, width, tilewidth, tileheight, tilesets, layers) {
        return json = {
            "height": height,
            "layers": layers,
            "orientation": "orthogonal",
            "properties": {},
            "tileheight": tileheight,
            "tilesets": tilesets,
            "tilewidth": tilewidth,
            "version": 1,
            "width": width
        }

    }
};

},{"./utils":"/Users/tim/projects/TigerRetriever/src/js/utils.js"}],"/Users/tim/projects/TigerRetriever/src/js/main.js":[function(require,module,exports){
'use strict';
var game = new Phaser.Game(746, 280, Phaser.AUTO, 'TigerRetriever');

game.state.add('Boot', require('./states/boot'));
game.state.add('Preload', require('./states/preload'));
game.state.add('Game', require('./states/game'));
game.state.add('MainMenu', require('./states/mainmenu'));

game.state.start('Boot');
},{"./states/boot":"/Users/tim/projects/TigerRetriever/src/js/states/boot.js","./states/game":"/Users/tim/projects/TigerRetriever/src/js/states/game.js","./states/mainmenu":"/Users/tim/projects/TigerRetriever/src/js/states/mainmenu.js","./states/preload":"/Users/tim/projects/TigerRetriever/src/js/states/preload.js"}],"/Users/tim/projects/TigerRetriever/src/js/states/boot.js":[function(require,module,exports){
var Boot = function(){};

//setting game configuration and loading the assets for the loading screen
Boot.prototype = {
    preload: function() {
        //assets we'll use in the loading screen
        this.load.image('preloadbar', 'assets/images/preloader-bar.png'); // not made yet
    },
    create: function() {
        //loading screen will have a white background
        this.game.stage.backgroundColor = '#0066ff';

        //scaling options
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;

        //have the game centered horizontally
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;

        //screen size will be set automatically
        //this.scale.setScreenSize(true);

        //physics system
        this.game.physics.startSystem(Phaser.Physics.ARCADE);

        this.state.start('Preload');
    }
};

module.exports = Boot;
},{}],"/Users/tim/projects/TigerRetriever/src/js/states/game.js":[function(require,module,exports){

var Game = function(){
    this.INIT_HERD_SIZE = 3;
};

module.exports = Game;

Game.prototype = {
    preload: function() {
        this.game.time.advancedTiming = true;
    },
    create: function() {

        this.map = this.game.add.tilemap('level1');

        //the first parameter is the tileset name as specified in Tiled, the second is the key to the asset
        this.map.addTilesetImage('tiles_spritesheet', 'gameTiles');

        //create layers
        this.backgroundlayer = this.map.createLayer('backgroundLayer');
        this.blockedLayer = this.map.createLayer('blockedLayer');

        //collision on blockedLayer
        this.map.setCollisionBetween(1, 5000, true, 'blockedLayer');

        //resizes the game world to match the layer dimensions
        this.backgroundlayer.resizeWorld();

        //create the herd
        this.herd = new Game.Herd(this.INIT_HERD_SIZE, this.game);

        //the camera will follow the player in the world
        this.game.camera.follow(this.herd.cameraFocus());

        //move player with cursor keys
        this.cursors = this.game.input.keyboard.createCursorKeys();

        //sounds
        this.coinSound = this.game.add.audio('coin');
    },

    //find objects in a Tiled layer that containt a property called "type" equal to a certain value
    findObjectsByType: function(type, map, layerName) {
        var result = [];
        map.objects[layerName].forEach(function(element){
            if(element.properties.type === type) {
                //Phaser uses top left, Tiled bottom left so we have to adjust
                //also keep in mind that some images could be of different size as the tile size
                //so they might not be placed in the exact position as in Tiled
                element.y -= map.tileHeight;
                result.push(element);
            }
        });
        return result;
    },
    //create a sprite from an object
    createFromTiledObject: function(element, group) {
        var sprite = group.create(element.x, element.y, element.properties.sprite);

        //copy all properties to the sprite
        Object.keys(element.properties).forEach(function(key){
            sprite[key] = element.properties[key];
        });
    },
    update: function() {
        //collisions
        this.herd.forEach(function(animal) {
            this.game.physics.arcade.collide(animal, this.blockedLayer, this.animalHit, null, this);
        }, this);

        //only respond to keys and keep the speed if the player is alive
        //check herd still living animals
        var alive = false;
        this.herd.forEach(function (animal) {
            if (animal.alive) {
                alive = true;
            }
        });
        if(alive) {
            this.herd.forEach(function (animal) {
                animal.body.velocity.x = 300;
            });

            if(this.cursors.up.isDown) {
                this.playersJump();
            }
            else if(this.cursors.down.isDown) {
                this.playersDuck();
            }

            if(!this.cursors.down.isDown && this.herd[0].isDucked && !this.pressingDown) {
                //change image and update the body size for the physics engine
                this.herd.forEach(function (animal) {
                    animal.loadTexture('player');
                    animal.body.setSize(animal.standDimensions.width, animal.standDimensions.height);
                    animal.isDucked = false;
                });
            }

            //restart the game if reaching the edge
            if(this.herd[0].x >= this.game.world.width) {
                this.game.state.start('Game');
            }
        }

    },
    animalHit: function(animal, blockedLayer) {
        //if hits on the right side, die
        if(animal.body.blocked.right) {
            //set to dead (this doesn't affect rendering)
            animal.alive = false;

            //stop moving to the right
            animal.body.velocity.x = 0;

            //change sprite image
            animal.loadTexture('playerDead');

            //check herd still living animals
            var gameOver = true;
            this.herd.forEach(function (animal) {
                if (animal.alive) {
                    gameOver = false;
                }
            });

            //go to gameover after a few miliseconds
            if (gameOver) {
                this.game.time.events.add(1500, this.gameOver, this);
            }
        }
    },
    gameOver: function() {
        this.game.state.start('Game');
    },
    playersJump: function() {
        this.herd.forEach(function (animal) {
            if (animal.body.blocked.down) {
                animal.body.velocity.y -= 700;
            }
        });
    },
    playersDuck: function() {
        this.herd.forEach(function (animal) {
           //change image and update the body size for the physics engine
           animal.loadTexture('playerDuck');
           animal.body.setSize(animal.duckedDimensions.width, animal.duckedDimensions.height);

           //we use this to keep track whether it's ducked or not
           animal.isDucked = true;
        });
    },
    render: function()
    {
        this.game.debug.text(this.game.time.fps || '--', 20, 70, "#00ff00", "40px Courier");
        this.herd.forEach(function (animal) {
            this .game.debug.bodyInfo(animal, 0, 80);
        }, this);
    }
};

Game.Herd = function (size, game) {
    this.game = game;

    for (i = 0; i < size; i++) {
        //make new member of the herd
        var member = this.game.add.sprite(100 + i * 50, 100, 'player');

        //enable physics on the member
        this.game.physics.arcade.enable(member);

        //player gravity
        member.body.gravity.y = 1000;

        //properties when the member is ducked and standing, so we can use in update()
        var playerDuckImg = this.game.cache.getImage('playerDuck');
        member.duckedDimensions = {width: playerDuckImg.width, height: playerDuckImg.height};
        member.standDimensions = {width: member.width, height: member.height};
        member.anchor.setTo(0.5, 1);

        this.push(member);
    }
};

//use an array as the base of the new object
Game.Herd.prototype = Array.prototype;

//focus is on the leading member
Game.Herd.prototype.cameraFocus = function() {
    var lead = this[0];
    for (i = 1; i < this.length; i++) {
        if (this[i].x > lead.x) {
            lead = this[i];
        }
    }
    return lead;
};

},{}],"/Users/tim/projects/TigerRetriever/src/js/states/mainmenu.js":[function(require,module,exports){
var MainMenu = function(){};
module.exports = MainMenu;

MainMenu.prototype = {
    preload: function() {
        //show loading screen
    },
    create: function() {
        var xPosition = 340;
        var yPosition = 60;

        this.playText = this.game.add.text(xPosition, yPosition, 'Play', { fontSize: '32px', fill: '#000' });
        this.instructionsText = this.game.add.text(xPosition, yPosition + 60, 'Instructions', { fontSize: '32px', fill: '#000' });
        this.pandaText = this.game.add.text(xPosition, yPosition + 120, 'Hug a Panda', { fontSize: '32px', fill: '#000' });
    },
    update: function () {

    }
};
},{}],"/Users/tim/projects/TigerRetriever/src/js/states/preload.js":[function(require,module,exports){
//loading the game assets
var Preload = function(){};
module.exports = Preload;

Preload.prototype = {
    preload: function() {
        //show loading screen
        this.preloadBar = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'preloadbar');
        this.preloadBar.anchor.setTo(0.5);
        this.preloadBar.scale.setTo(3);

        this.load.setPreloadSprite(this.preloadBar);

        var levelJson = JSON.stringify(require('../jsongenerator').recreateInitialJson());

        this.load.tilemap('level1', null, levelJson, Phaser.Tilemap.TILED_JSON);
        this.load.image('gameTiles', 'assets/images/background_spritesheet.png');
        this.load.image('player', 'assets/images/player.png');
        this.load.image('playerDuck', 'assets/images/player_duck.png');
        this.load.image('playerDead', 'assets/images/player_dead.png');

    },
    create: function() {
        this.state.start('Game');
    }
};
},{"../jsongenerator":"/Users/tim/projects/TigerRetriever/src/js/jsongenerator.js"}],"/Users/tim/projects/TigerRetriever/src/js/utils.js":[function(require,module,exports){
var utils = function () {
};
module.exports = utils;

utils.prototype = {
    getRandomInt: function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },

    get_type: function (thing) {
        if (thing === null)return "[object Null]"; // special case
        return Object.prototype.toString.call(thing);
    }
};
},{}]},{},["/Users/tim/projects/TigerRetriever/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
